--- main.js
+++ main.js
@@
-  function resize() {
-    canvas.width = window.innerWidth;
-    canvas.height = window.innerHeight;
-    MAX_RADIUS = Math.min(canvas.width, canvas.height) * 0.6;
-  }
+  function resize() {
+    // handle high-DPI displays
+    const width = window.innerWidth;
+    const height = window.innerHeight;
+    const dpr = window.devicePixelRatio || 1;
+    canvas.width = width * dpr;
+    canvas.height = height * dpr;
+    // reset transform and scale to map CSS pixels to device pixels
+    ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
+    MAX_RADIUS = Math.min(width, height) * 0.6;
+  }
@@
-  function drawBars() {
-    animationId = requestAnimationFrame(drawBars);
-    // update audio data and clear
-    analyser.getByteFrequencyData(dataArray);
-    const cw = canvas.width, ch = canvas.height;
+  function drawBars() {
+    animationId = requestAnimationFrame(drawBars);
+    // update audio data and clear
+    analyser.getByteFrequencyData(dataArray);
+    // use CSS pixel dimensions for drawing
+    const cw = canvas.clientWidth, ch = canvas.clientHeight;
@@
-  function drawBlackHole() {
-    if (!blackHoleActive) return;
-    const cx = canvas.width / 2;
-    const cy = canvas.height / 2;
+  function drawBlackHole() {
+    if (!blackHoleActive) return;
+    const cx = canvas.clientWidth / 2;
+    const cy = canvas.clientHeight / 2;
@@
-  function drawSpiral(timestamp = performance.now()) {
-    analyser.getByteFrequencyData(dataArray);
-    const cw = canvas.width, ch = canvas.height;
+  function drawSpiral(timestamp = performance.now()) {
+    analyser.getByteFrequencyData(dataArray);
+    // use CSS pixel dimensions for drawing
+    const cw = canvas.clientWidth, ch = canvas.clientHeight;
@@
-  function stopVisualization() {
-    ...
-    ctx.clearRect(0, 0, canvas.width, canvas.height);
+  function stopVisualization() {
+    ...
+    // clear using CSS pixel dimensions
+    ctx.clearRect(0, 0, canvas.clientWidth, canvas.clientHeight);
}
